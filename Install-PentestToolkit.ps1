<#
.SYNOPSIS
  Installs a Windows pentest toolkit with common tools, Chocolatey, GitHub releases,
  PATH integration, and optional Defender exclusions.

.DESCRIPTION
  - Installs packages via Chocolatey (auto-installs Chocolatey if missing)
  - Downloads latest GitHub releases
  - Extracts tools to ~/PentestTools/bin
  - Adds all tool folders to user's PATH
  - Offers optional Windows Defender exclusions (opt-in, safe)
#>

$ErrorActionPreference = "Stop"

# --- Paths ---
$toolsRoot = "$env:USERPROFILE\PentestTools"
$zipsPath  = "$toolsRoot\zips"
$binPath   = "$toolsRoot\bin"

New-Item -ItemType Directory -Force -Path $toolsRoot, $zipsPath, $binPath | Out-Null

# --- Ensure Admin ---
function Ensure-Admin {
  $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
  if (-not $isAdmin) {
    Write-Host "[!] This script must be run as Administrator." -ForegroundColor Red
    exit 1
  }
}
Ensure-Admin

# --- Ensure Chocolatey ---
function Ensure-ChocolateyInstalled {
  if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
    Write-Host "[+] Chocolatey not found. Installing..." -ForegroundColor Cyan
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    Set-ExecutionPolicy Bypass -Scope Process -Force
    Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

    if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
      Write-Host "[X] Chocolatey install failed. Please install manually." -ForegroundColor Red
      exit 1
    }
  } else {
    Write-Host "[=] Chocolatey already installed." -ForegroundColor Yellow
  }
}
Ensure-ChocolateyInstalled

# --- Install Chocolatey Packages ---
function Install-ChocoPackage {
  param ($name)
  if (!(choco list --localonly | Select-String "^$name")) {
    Write-Host "[+] Installing $name via Chocolatey..." -ForegroundColor Cyan
    choco install $name -y --no-progress
  } else {
    Write-Host "[=] $name already installed." -ForegroundColor Yellow
  }
}

$chocoPackages = @(
  "git", "python", "notepadplusplus", "wireshark", "7zip", "fiddler",
  "postman", "draw.io", "sysinternals"
)
$chocoPackages | ForEach-Object { Install-ChocoPackage $_ }

# --- GitHub Downloads ---
function Download-FromGitHub {
  param (
    [string]$repo,
    [string]$assetMatch,
    [string]$targetFolder
  )

  $api = "https://api.github.com/repos/$repo/releases/latest"
  $headers = @{ "User-Agent" = "PentestToolkit" }

  try {
    $json = Invoke-RestMethod -Uri $api -Headers $headers
    $asset = $json.assets | Where-Object { $_.name -like $assetMatch } | Select-Object -First 1

    if ($null -eq $asset) {
      Write-Warning "[-] No asset match found for $repo"
      return
    }

    $dest = "$zipsPath\$($asset.name)"
    if (!(Test-Path $dest)) {
      Write-Host "[+] Downloading $($asset.name) from $repo"
      Invoke-WebRequest -Uri $asset.browser_download_url -OutFile $dest
      Expand-Archive -Path $dest -DestinationPath $targetFolder -Force
    } else {
      Write-Host "[=] $($asset.name) already downloaded." -ForegroundColor Yellow
    }
  } catch {
    Write-Warning "[-] Failed to download from $repo"
  }
}

$githubTools = @(
  @{ repo = "BloodHoundAD/BloodHound"; match = "*.zip"; folder = "$binPath\\BloodHound" },
  @{ repo = "gentilkiwi/mimikatz"; match = "*x64.zip"; folder = "$binPath\\Mimikatz" },
  @{ repo = "GhostPack/Rubeus"; match = "*.zip"; folder = "$binPath\\Rubeus" },
  @{ repo = "GhostPack/Seatbelt"; match = "*.zip"; folder = "$binPath\\Seatbelt" },
  @{ repo = "byt3bl33d3r/CrackMapExec"; match = "*.zip"; folder = "$binPath\\CME" },
  @{ repo = "AlessandroZ/LaZagne"; match = "*.zip"; folder = "$binPath\\LaZagne" },
  @{ repo = "dirkjanm/ROADtools"; match = "*.zip"; folder = "$binPath\\ROADtools" },
  @{ repo = "Gerenios/AADInternals"; match = "*.zip"; folder = "$binPath\\AADInternals" },
  @{ repo = "vletoux/pingcastle"; match = "*.zip"; folder = "$binPath\\PingCastle" }
)

foreach ($tool in $githubTools) {
  Download-FromGitHub -repo $tool.repo -assetMatch $tool.match -targetFolder $tool.folder
}

# --- Add to PATH ---
function Add-ToUserPath {
  param ([string[]]$paths)

  $userPath = [Environment]::GetEnvironmentVariable("Path", "User")
  if (-not $userPath) { $userPath = "" }

  $entries = $userPath -split ";" | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne "" }
  foreach ($path in $paths) {
    if (-not ($entries -contains $path)) {
      Write-Host "[+] Adding to PATH: $path"
      $userPath += ";$path"
    } else {
      Write-Host "[=] Already in PATH: $path" -ForegroundColor Yellow
    }
  }

  [Environment]::SetEnvironmentVariable("Path", $userPath, "User")
  Write-Host "‚úÖ PATH updated. Restart terminal to take effect." -ForegroundColor Green
}

$toolFolders = Get-ChildItem -Directory -Path $binPath | ForEach-Object { $_.FullName }
Add-ToUserPath -paths $toolFolders

# --- Defender Exclusions (Optional) ---
function Add-DefenderExclusions {
  param (
    [string]$folder,
    [string[]]$executables
  )

  if (-not (Get-Command Add-MpPreference -ErrorAction SilentlyContinue)) {
    Write-Warning "[-] Defender module not available. Skipping exclusions."
    return
  }

  Write-Host ""
  Write-Host "Optional: Add Defender exclusions for PentestTools?" -ForegroundColor Cyan
  $choice = Read-Host "Add exclusions? (y/N)"
  if ($choice -in @("y", "Y", "yes", "Yes")) {
    try {
      Add-MpPreference -ExclusionPath $folder
      Write-Host "[+] Folder excluded: $folder"
    } catch { Write-Warning "Could not exclude folder: $_" }

    foreach ($exe in $executables) {
      try {
        Add-MpPreference -ExclusionProcess $exe
        Write-Host "[+] Excluded process: $exe"
      } catch {
        Write-Warning "Could not exclude $exe"
      }
    }

    Write-Host "‚úÖ Defender exclusions complete." -ForegroundColor Green
  } else {
    Write-Host "[=] Skipped Defender exclusions." -ForegroundColor Yellow
  }
}

$exes = @(
  "mimikatz.exe", "SharpHound.exe", "bloodhound.exe",
  "Rubeus.exe", "seatbelt.exe", "LaZagne.exe", "crackmapexec.exe"
)
Add-DefenderExclusions -folder $toolsRoot -executables $exes

# --- Done ---
Write-Host ""
Write-Host "üéâ Toolkit setup complete!" -ForegroundColor Green
Write-Host "üìÅ Tools installed in: $binPath"
Write-Host "üîÅ Restart your PowerShell window to use the tools from any location."

