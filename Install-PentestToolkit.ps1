# Uncomment if Chocolatey is not installed
# Set-ExecutionPolicy Bypass -Scope Process -Force
# iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

$ErrorActionPreference = "Stop"

# Define install folders
$toolsRoot = "$env:USERPROFILE\PentestTools"
$zipsPath = "$toolsRoot\zips"
$binPath = "$toolsRoot\bin"

New-Item -ItemType Directory -Force -Path $toolsRoot, $zipsPath, $binPath | Out-Null

function Install-ChocoPackage {
    param ($packageName)
    if (!(choco list --localonly | Select-String "^$packageName")) {
        choco install $packageName -y
    } else {
        Write-Host "$packageName already installed." -ForegroundColor Yellow
    }
}

function Download-FromGitHub {
    param (
        [string]$repo,
        [string]$assetMatch,
        [string]$targetFolder
    )

    $api = "https://api.github.com/repos/$repo/releases/latest"
    $json = Invoke-RestMethod -Uri $api
    $asset = $json.assets | Where-Object { $_.name -like $assetMatch } | Select-Object -First 1

    if ($null -eq $asset) {
        Write-Warning "No matching asset found for $repo"
        return
    }

    $file = "$zipsPath\$($asset.name)"
    if (!(Test-Path $file)) {
        Invoke-WebRequest -Uri $asset.browser_download_url -OutFile $file
        Expand-Archive -Path $file -DestinationPath $targetFolder -Force
        Write-Host "Downloaded and extracted $($asset.name)"
    } else {
        Write-Host "$($asset.name) already downloaded." -ForegroundColor Yellow
    }
}

# -- Chocolatey Packages --
$chocoPackages = @(
    "git",
    "python",
    "notepadplusplus",
    "wireshark",
    "7zip",
    "fiddler",
    "postman",
    "draw.io",
    "sysinternals"
)

foreach ($pkg in $chocoPackages) {
    Install-ChocoPackage $pkg
}

# -- GitHub Tools --
$githubTools = @(
    @{ repo = "BloodHoundAD/BloodHound"; match = "*.zip"; folder = "$binPath\BloodHound" },
    @{ repo = "gentilkiwi/mimikatz"; match = "*x64.zip"; folder = "$binPath\Mimikatz" },
    @{ repo = "GhostPack/Rubeus"; match = "*.zip"; folder = "$binPath\Rubeus" },
    @{ repo = "GhostPack/Seatbelt"; match = "*.zip"; folder = "$binPath\Seatbelt" },
    @{ repo = "byt3bl33d3r/CrackMapExec"; match = "*.zip"; folder = "$binPath\CME" },
    @{ repo = "AlessandroZ/LaZagne"; match = "*.zip"; folder = "$binPath\LaZagne" },
    @{ repo = "dirkjanm/ROADtools"; match = "*.zip"; folder = "$binPath\ROADtools" },
    @{ repo = "Gerenios/AADInternals"; match = "*.zip"; folder = "$binPath\AADInternals" },
    @{ repo = "vletoux/pingcastle"; match = "*.zip"; folder = "$binPath\PingCastle" }
)

foreach ($tool in $githubTools) {
    Download-FromGitHub -repo $tool.repo -assetMatch $tool.match -targetFolder $tool.folder
}

Write-Host "`nâœ… All tools downloaded and installed to $toolsRoot" -ForegroundColor Green


